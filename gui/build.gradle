plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.1.1'
    id 'io.freefair.lombok' version "8.14"
}

group = 'com.github.observant_sun'
version = '0.4.3-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

configurations {
    create("jniReleaseRuntime") {
        canBeConsumed = false
        canBeResolved = true
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.NATIVE_RUNTIME))
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, "releaseRuntimeElements"))
            attribute(Attribute.of('org.gradle.native.optimized', Boolean.class), true)
        }
    }
    create("jniDebugRuntime") {
        canBeConsumed = false
        canBeResolved = true
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.NATIVE_RUNTIME))
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, "debugRuntimeElements"))
            attribute(Attribute.of('org.gradle.native.optimized', Boolean.class), false)
        }
    }
}

dependencies {
    implementation("com.google.guava:guava:32.0.1-android")
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation("org.slf4j:slf4j-api:1.7.36")
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation("ch.qos.logback:logback-classic:1.5.18")
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation("ch.qos.logback:logback-core:1.5.18")
//
//    // https://mvnrepository.com/artifact/com.google.inject/guice
//    implementation("com.google.inject:guice:7.0.0")
//    // https://mvnrepository.com/artifact/com.gluonhq/ignite-guice
//    implementation("com.gluonhq:ignite-guice:1.2.2")

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:5.18.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'

    add("jniReleaseRuntime", project(":lib"))
    add("jniDebugRuntime", project(":lib"))
}

task copyDebugLibs(type: Copy) {
    from configurations.jniDebugRuntime
    into 'build/nativelibs'
}

jar {
    setArchiveBaseName 'rattlegram-desktop'
}

application {
    mainClass = 'com.github.observant_sun.rattlegram.RattlegramLauncher'
    applicationName = 'rattlegram-desktop'
    mainModule = 'rattlegram'
    applicationDefaultJvmArgs += [
            "-Djava.library.path=${buildDir}/nativelibs"
    ]
}

run {
    dependsOn(copyDebugLibs)
}

distributions {
    main {
        distributionClassifier = "${javafx.platform.classifier}"
        contents {
            into('nativelib') {
                from configurations['jniReleaseRuntime']
            }
        }
    }
}

startScripts {
    doFirst {
        applicationDefaultJvmArgs = ['']
    }
    doLast {
        // TODO write a custom template
        //  see https://docs.gradle.org/current/javadoc/org/gradle/jvm/application/tasks/CreateStartScripts.html
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=\'""\'', 'DEFAULT_JVM_OPTS="-Djava.library.path=$APP_HOME/nativelib"')
        windowsScript.text = windowsScript.text.replace('DEFAULT_JVM_OPTS=\'""\'', 'DEFAULT_JVM_OPTS=%~dp0..\\nativelib')
    }
}

javafx {
    version = '21'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.media' ]
}

test {
    useJUnitPlatform()
}

task copyReleaseLibsIntoJlinkImage(type: Copy) {
    dependsOn 'jlink'

    from configurations.jniReleaseRuntime
    into 'build/image/bin'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    imageZip = project.file("${buildDir}/distributions/rattlegram-desktop-${version}-${javafx.platform.classifier}-jlink-image.zip")
    launcher {
        name = 'rattlegram-desktop'
        jvmArgs = [
                '-Djava.library.path={{BIN_DIR}}'
        ]
    }
}

jlinkZip {
    dependsOn(copyReleaseLibsIntoJlinkImage)
}

build {
    dependsOn(jlinkZip)
}