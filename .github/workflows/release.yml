# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Create new release

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
      
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true
  
env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  build-linux:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        fetch-depth: 0
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distributable-linux
        path: gui/build/distributions/*.zip
        overwrite: true

#  build-windows:
#
#    runs-on: windows-latest
#    permissions:
#      contents: read
#
#    steps:
#    - name: Set up MinGW
#      uses: egor-tensin/setup-mingw@v2
#      with:
#        platform: x64
#
#    - uses: actions/checkout@v4
#    - name: Set up JDK 17
#      uses: actions/setup-java@v4
#      with:
#        java-version: '17'
#        distribution: 'temurin'
#
#    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
#    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
#    - name: Setup Gradle
#      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
#
#    - name: Build with Gradle Wrapper
#      run: ./gradlew build
#
#    - name: Archive production artifacts
#      uses: actions/upload-artifact@v4
#      with:
#        name: distributable
#        path: gui/build/distributions/*.zip

  build-macos:

    runs-on: macos-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distributable-macos
        path: gui/build/distributions/*.zip
        overwrite: true
  
  # dependency-submission:

  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'

  #   # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
  #   # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
  #   - name: Generate and submit dependency graph
  #     uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
  release:
    permissions:
        contents: write

    runs-on: ubuntu-latest

    needs:
      - build-linux
      - build-macos

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current git tag
        id: tag
        # You may pin to the exact commit or the version.
        # uses: devops-actions/action-get-tag@4e13c4ea459efa2988a10d5ff0f252bb097929ef
        uses: devops-actions/action-get-tag@v1.0.2
        with:
          strip_v: false

      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: ./release
          merge-multiple: true

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}

      - name: Upload release
        id: upload_release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./release')) {
              if (path.extname(file) === '.zip') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./release/${file}`)
                });
              }
            }
    
          
