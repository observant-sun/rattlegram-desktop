plugins {
    id 'java'
    id 'application'
    id 'cpp'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.1.1'
    id 'io.freefair.lombok' version "8.14"
}

group = 'com.github.observant_sun'
version = '0.3.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

dependencies {
//    implementation("com.google.guava:guava:32.0.1-android")
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation("org.slf4j:slf4j-api:1.7.36")
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation("ch.qos.logback:logback-classic:1.5.18")
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation("ch.qos.logback:logback-core:1.5.18")
//
//    // https://mvnrepository.com/artifact/com.google.inject/guice
//    implementation("com.google.inject:guice:7.0.0")
//    // https://mvnrepository.com/artifact/com.gluonhq/ignite-guice
//    implementation("com.gluonhq:ignite-guice:1.2.2")


    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

application {
    mainModule = 'rattlegram'
    mainClass = 'com.github.observant_sun.rattlegram.RattlegramLauncher'
}

run {
    systemProperty "java.library.path", file("${buildDir}/libs/rattlegram/shared").absolutePath
}

javafx {
    version = "21.0.8"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.media' ]
}

var javaHome = System.getProperty("java.home")

model {

    components {
        var includePlatformSubfolder = "linux"
        rattlegram(NativeLibrarySpec) {
            binaries.all {
                cppCompiler.args '-std=c++17'
                cppCompiler.args '-O3'
                cppCompiler.args '-ffast-math'
                cppCompiler.args '-fno-exceptions'
                cppCompiler.args '-fno-rtti'
                cppCompiler.args '-I', "${javaHome}/include"
                cppCompiler.args '-I', "${javaHome}/include/${includePlatformSubfolder}"
                cppCompiler.args '-fPIC'
                cppCompiler.args '-D_REENTRANT'
            }

        }
    }
}

task copyCppLibsToJLinkImage {
    group = 'distribution'
    doLast {
        copy {
            from "${buildDir}/libs/rattlegram/shared/librattlegram.so"
            into "${buildDir}/image/applib/"
        }
    }
}

jlink {
    imageZip = project.file("${buildDir}/distributions/rattlegram-desktop-${version}-${javafx.platform.classifier}.zip")
    launcher {
        name = 'rattlegram-desktop'
        jvmArgs = [
                '-Djava.library.path={{BIN_DIR}}/../applib'
        ]
    }
}

jlinkZip { dependsOn(copyCppLibsToJLinkImage)
    group = 'distribution'
}

run.dependsOn 'rattlegramSharedLibrary'
classes.dependsOn 'rattlegramSharedLibrary'
copyCppLibsToJLinkImage.dependsOn 'rattlegramSharedLibrary'
copyCppLibsToJLinkImage.dependsOn 'jlink'

test {
    useJUnitPlatform()
}